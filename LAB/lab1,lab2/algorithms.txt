	----------------------------------------------------------------------------------------------------------------------
Example 1: Sequential Algorithm (Add two numbers)
Algorithm for adding two numbers
Input: Two numbers a and b
Output: Sum of the two numbers

Step 1: Start
Step 2: Read a
Step 3: Read b
Step 4: sum <- a + b
Step 5: Print sum
Step 6: Stop
----------------------------------------------------------------------------------------------------------------------
Example 2: Selection Algorithm (Find largest of three numbers)

Algorithm for finding the largest of three numbers
Input: Three numbers x, y, z
Output: Largest number among the three

Step 1: Start
Step 2: Read x, y, z
Step 3: if x > y and x > z then
  3.1: largest <- x
Step 4: else-if y > z then
  4.1: largest <- y
Step 5: else
  5.1: largest <- z
Step 6: Print largest
Step 7: Stop
----------------------------------------------------------------------------------------------------------------------
Example 3: Repetition Algorithm 	

Algorithm for printing numbers from 1 to N
Input: A positive integer N
Output: Numbers from 1 up to N

Step 1: Start
Step 2: Read N
Step 3: count <- 1
Step 4: while count <= N do
  4.1: Print count
  4.2: count <- count + 1
Step 5: Stop
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
Scenario-based examples:
----------------------------------------------------------------------------------------------------------------------
Example 1: Sequential Algorithm (Calculate Simple Interest for a Bank Loan)

Algorithm for calculating simple interest for a loan
Input: Principal amount P, Rate of interest R, Time in years T
Output: Simple Interest amount SI

Step 1: Start
Step 2: Read P
Step 3: Read R
Step 4: Read T
Step 5: SI <- (P * R * T) / 100
Step 6: Print SI
Step 7: Stop
----------------------------------------------------------------------------------------------------------------------
Example 2: Selection Algorithm (Decide Student Result: Pass or Fail)

Algorithm for checking if a student passes or fails in an exam
Input: Marks obtained marks, Passing mark pass_mark
Output: Result as "Pass" or "Fail"

Step 1: Start
Step 2: Read marks
Step 3: Read pass_mark
Step 4: if marks >= pass_mark then
  4.1: Print "Pass"
Step 5: else
  5.1: Print "Fail"
Step 6: Stop
----------------------------------------------------------------------------------------------------------------------
Example 3: Repetition Algorithm (Calculate Total Grocery Bill for Multiple Items)

Algorithm for calculating total grocery bill by adding multiple items
Input: Item prices entered by customer, 0 to indicate no more items
Output: Final bill amount

Step 1: Start
Step 2: total <- 0
Step 3: Read item_price
Step 4: while item_price != 0 do
  4.1: total <- total + item_price
  4.2: Read next item_price
Step 5: Print total
Step 6: Stop
----------------------------------------------------------------------------------------------------------------------
Example 4: Nested Selection (Classify Age Group)

Algorithm for classifying a person’s age group
Input: Age of a person age
Output: Category as "Child", "Teenager", "Adult", or "Senior"

Step 1: Start
Step 2: Read age
Step 3: if age < 18 then
  3.1: if age < 13 then
    3.1.1: Print "Child"
  3.2: else
    3.2.1: Print "Teenager"
Step 4: else
  4.1: if age <= 60 then
    4.1.1: Print "Adult"
  4.2: else
    4.2.1: Print "Senior"
Step 5: Stop
----------------------------------------------------------------------------------------------------------------------
Example 5: Nested Loop (Print Multiplication Table up to N)

Algorithm for printing multiplication tables up to N
Input: A positive integer N
Output: Multiplication tables from 1 up to N

Step 1: Start
Step 2: Read N
Step 3: i <- 1
Step 4: while i <= N do
  4.1: j <- 1
  4.2: while j <= 10 do
    4.2.1: Print i * j
    4.2.2: j <- j + 1
  4.3: i <- i + 1
Step 5: Stop
----------------------------------------------------------------------------------------------------------------------
Example 6: Nested Condition with Loop (ATM Withdrawal Simulation)

Algorithm for simulating ATM cash withdrawal with balance check
Input: Account balance balance, Withdrawal amounts entered repeatedly, 0 to stop
Output: Updated balance after each valid withdrawal

Step 1: Start
Step 2: Read balance
Step 3: Read withdrawal_amount
Step 4: while withdrawal_amount != 0 do
  4.1: if withdrawal_amount <= balance then
    4.1.1: balance <- balance - withdrawal_amount
    4.1.2: Print "Withdrawal successful, Remaining Balance:", balance
  4.2: else
    4.2.1: Print "Insufficient Balance"
  4.3: Read next withdrawal_amount
Step 5: Print "Final Balance:", balance
Step 6: Stop
----------------------------------------------------------------------------------------------------------------------